/**
 * @packageDocumentation
 * @module api.functional.requester
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import { NovelUCICode } from "../novel";
import { tags } from "typia"

export namespace Body {
    export interface IRegistRequesterArgs{
        novelId: NovelUCICode
        requesterId: string & tags.MaxLength<38>
        email: string & tags.Format<"email">
        name: string
    }
}

export namespace Query {
    export interface IGetHistoriesArgs {
        id: string & tags.MaxLength<38>
    }
}

export * as interest from "./interest";

/**
 * @controller RequesterController.searchRequester
 * @path POST /requester
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function searchRequester(
  connection: IConnection,
  query: searchRequester.Query,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...searchRequester.METADATA,
    template: searchRequester.METADATA.path,
    path: searchRequester.path(query),
  });
}
export namespace searchRequester {
  export type Query = Resolved<Query.IGetHistoriesArgs>;

  export const METADATA = {
    method: "POST",
    path: "/requester",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (query: searchRequester.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/requester";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
