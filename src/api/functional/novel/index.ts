/**
 * @packageDocumentation
 * @module api.functional.novel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";

export * as status from "./status";
export * as list from "./list";

/**
 * @controller NovelController.getNovel
 * @path GET /novel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getNovel(
  connection: IConnection,
  query: getNovel.Query,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...getNovel.METADATA,
    template: getNovel.METADATA.path,
    path: getNovel.path(query),
  });
}
export namespace getNovel {
  export type Query = Resolved<Query.IGetNovelById>;

  export const METADATA = {
    method: "GET",
    path: "/novel",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: getNovel.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/novel";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @controller NovelController.registNovel
 * @path POST /novel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function registNovel(
  connection: IConnection,
  body: registNovel.Input,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...registNovel.METADATA,
      template: registNovel.METADATA.path,
      path: registNovel.path(),
    },
    body,
  );
}
export namespace registNovel {
  export type Input = Resolved<Body.IRegistNovelArgs>;

  export const METADATA = {
    method: "POST",
    path: "/novel",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/novel";
}

/**
 * @controller NovelController.deleteNovel
 * @path DELETE /novel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteNovel(
  connection: IConnection,
  query: deleteNovel.Query,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...deleteNovel.METADATA,
    template: deleteNovel.METADATA.path,
    path: deleteNovel.path(query),
  });
}
export namespace deleteNovel {
  export type Query = Resolved<Query.IGetNovelById>;

  export const METADATA = {
    method: "DELETE",
    path: "/novel",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: deleteNovel.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/novel";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

import { tags } from "typia"

export namespace Body {
    export interface IUpdateReviewStatusArgs {
        statusId: string & tags.MaxLength<30>
        reason: string & tags.MaxLength<300>
        status: string
        responsiblePersonEmail: string & tags.Format<"email">
        responsiblePerson: string
        requesterEmail: string & tags.Format<"email">
    }
}

export type NovelUCICode = string & tags.Pattern<"^[A-Za-z0-9]{4}-[0-9]{8,11}$">

export namespace Query {
    export interface IGetNovelById {
        id: NovelUCICode
    }
    export interface IGetNovelList {
        page: number & tags.Minimum<1>
        orderBy: "desc" | "asc"
    }
}

export namespace Body {
    export interface IRegistNovelArgs {
        id: NovelUCICode
        requester: IRequesterInfoArgs
        novelInfo: INovelInfoArgs
    }

    interface IRequesterInfoArgs {
        requesterId: string & tags.MaxLength<38>
        requesterEmail: string & tags.Format<"email">
        requesterName: string
    }

    interface INovelInfoArgs {
        novelTitle: string & tags.MaxLength<200>
        novelDescription: string & tags.MaxLength<200>
        ref: string & tags.Format<"url">
    }
}